All exercises here concern the music database, which is available at 
http://tahaghoghi.com/LearningMySQL/Downloads/Files/Data/SQL_files_with_foreign_key_references/music.sql

I strongly recommend ANSI join style as per 
http://code.openark.org/blog/mysql/mysql-joins-on-vs-using-vs-theta-style - 
the nutshell is that Theta style is like this:

SELECT ... 
FROM table1 INNER JOIN table2 
WHERE field1=field2 AND filter=something;

ANSI style is like this:
SELECT ... 
FROM table1 INNER JOIN table2 ON (field1=field2) 
WHERE filter=something;

The reason for this is that when you have many tables joined 
it's easier to see the join clause in ON or USING with ANSI style. 
If you join many tables and use theta style, where everything is 
in the WHERE clause, it's possible to forget some of the join clauses 
in the WHERE. If you put the join clauses in the JOIN part, it's way more readable.

1) Use one or more SELECT statements to find out how many tracks are on New Order's Brotherhood album.

   SELECT COUNT(track_id) FROM music.track INNER JOIN music.album USING (artist_id,album_id)
          WHERE (SELECT artist_id FROM music.artist WHERE artist_name = "New Order")
          AND album_name = "Brotherhood";

2) Using a join, list the albums that we own by the band New Order

   SELECT album_name FROM music.album INNER JOIN music.artist USING (artist_id)
          WHERE artist_name = "New Order" ORDER BY album.album_name;

3) With INSERT statements, add the artist Leftfield to the database.

   For this new artist, add the album "Leftism" that has the following tracks:

   a. Release the Pressure (Time: 7.39)
   b. Afro-Melt (Time: 7.33)
   c. Melt (Time: 5.21)
   d. Song of Life (Time: 6.55)
   e. Original (Time: 6.00)
   f. Black Flute (Time: 3.46)
   g. Space Shanty (Time: 7.15)
   h. Inspection Check One (Time: 6.30)
   i. Storm 3000 (Time: 5.44)
   j. Open Up (Time: 6.52)
   k. 21st Century Poem (Time: 5.42)
   l. Bonus Track (Time: 1.22)

   The answer to this question should be the INSERT statement(s).

   SELECT 1+MAX(artist_id) FROM music.artist;
   INSERT INTO music.artist VALUES(7, "Leftfield");

   INSERT INTO music.track VALUES
          (0, "Release the Pressure", 7, 0, 7.39),
          (1, "Afro-Melt", 7, 0, 7.33),
          (2, "Melt", 7, 0, 5.21),
          (3, "Song of Life", 7, 0, 6.55),
          (4, "Original", 7, 0, 6.00),
          (5, "Black Flute", 7, 0, 3.46),
          (6, "Space Shanty", 7, 0, 7.15),
          (7, "Inspection Check One", 7, 0, 6.30),
          (8, "Storm 3000", 7, 0, 5.44),
          (9, "Open Up", 7, 0, 6.52),
          (10, "21st Century Poem", 7, 0, 5.42),
          (11, "Bonus Track", 7, 0, 1.22);

   INSERT INTO music.played VALUES
          (7, 0, 0, DEFAULT),
          (7, 0, 1, DEFAULT),
          (7, 0, 2, DEFAULT),
          (7, 0, 3, DEFAULT),
          (7, 0, 4, DEFAULT),
          (7, 0, 5, DEFAULT),
          (7, 0, 6, DEFAULT),
          (7, 0, 7, DEFAULT),
          (7, 0, 8, DEFAULT),
          (7, 0, 9, DEFAULT),
          (7, 0, 10, DEFAULT),
          (7, 0, 11, DEFAULT);

4) How long in minutes is the Leftism album you added in Question 3? Hint: use the
SUM() aggregate function.

    SELECT SUM(time) FROM music.track WHERE artist_id = 7 AND album_id = 0;
    OR
    SELECT SEC_TO_TIME(SUM(time) * 60) FROM music.track
           WHERE artist_id = 7 AND album_id = 0;

5) Change the time for the Original track on the Leftism album to 6.22.

    UPDATE music.track SET time = 6.22
           WHERE artist_id = 7
           AND album_id = 0
           AND track_name = "Original";

6) Remove the 'Bonus Track' from the Leftism album,

    DELETE FROM music.played
           WHERE (album_id, track_id) IN
           (select album_id,track_id FROM track
           WHERE track_name = "Bonus Track");

    DELETE FROM music.track
           WHERE artist_id = 7
           AND album_id = 0
           AND track_name = "Bonus Track";